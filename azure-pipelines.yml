# Test pipeline

trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: BuildAndTest
    displayName: "Build Enivornment (Ubuntu)"
    jobs:
      - job: CoreConfig
        displayName: "Configuring the system to core dump"
        variables:
          - name: CORE_EXEC_PATH_FILE
            value: "$(Build.StagingDirectory)/core_handler_exec_paths.txt"
          - name: CORE_DEST
            value: /tmp/core
        steps:
          - bash: "sudo $(Build.SourcesDirectory)/script/CaptureCritical/setup.sh $(Build.SourcesDirectory) $(CORE_DEST)"
            displayName: "Setting up system-wide environment"
          - bash: "$(Build.SourcesDirectory)/isegfault/build.sh $(Build.SourcesDirectory) $(Build.BinariesDirectory)"
            displayName: "Building failure exec(1)"
          - bash: "$(Build.SourcesDirectory)/ithrowuncaughtex/build.sh $(Build.SourcesDirectory) $(Build.BinariesDirectory)"
            displayName: "Building failure exec(2)"
          - bash: "ls -la $(Build.BinariesDirectory)"
            displayName: "Dump of build bin folder"
          - bash: "echo $(Build.BinariesDirectory) > $(CORE_EXEC_PATH_FILE)"
            displayName: "Writing the exec path file"
          - bash: "$(Build.SourcesDirectory)/tests/isegfault-test.sh $(Build.BinariesDirectory)"
            displayName: "Segmentation fault test"
          - bash: "$(Build.SourcesDirectory)/tests/ithrowuncaughtex-test.sh $(Build.BinariesDirectory)"
            displayName: "Uncaught exception test"
          - script: |
              docker pull github/super-linter:latest
          - script: |
              docker run \
              -e RUN_LOCAL=true \
              -e ERROR_ON_MISSING_EXEC_BIT=true \
              -e FILTER_REGEX_EXCLUDE=.*/thirdparty/.* \
              -e SUPPRESS_FILE_TYPE_WARN=true \
              -e LOG_LEVEL=VERBOSE \
              -e LINTER_RULES_PATH=/ \
              -e DOCKERFILE_HADOLINT_FILE_NAME=.hadolint.yml \
              -e MARKDOWN_CONFIG_FILE=.markdownlint.yml \
              -e PYTHON_FLAKE8_CONFIG_FILE=.flake8 \
              -e PYTHON_ISORT_CONFIG_FILE=setup.cfg \
              -e PYTHON_MYPY_CONFIG_FILE=setup.cfg \
              -e VALIDATE_ALL_CODEBASE=true \
              -e VALIDATE_BASH=true \
              -e VALIDATE_BASH_EXEC=true \
              -e VALIDATE_CLANG_FORMAT=true \
              -e VALIDATE_DOCKERFILE_HADOLINT=true \
              -e VALIDATE_MARKDOWN=true \
              -e VALIDATE_POWERSHELL=true \
              -e VALIDATE_PYTHON_FLAKE8=true \
              -e VALIDATE_PYTHON_ISORT=true \
              -e VALIDATE_SHELL_SHFMT=true \
              -e VALIDATE_YAML=true \
              -v $(Build.SourcesDirectory):/tmp/lint \
                github/super-linter

  - stage: Testy
    displayName: "A test to see if what's built can be used within a separate stage"
    jobs:
      - job: ReRun
        displayName: "Re-run core handler"
        variables:
          - name: CORE_EXEC_PATH_FILE
            value: "$(Build.StagingDirectory)/core_handler_exec_paths.txt"
        steps:
          - bash: "echo $(Build.BinariesDirectory) > $(CORE_EXEC_PATH_FILE)"
            displayName: "Writing the exec path file"
          - template: templates/CaptureCriticalPrepare.yml
            parameters:
              CoreDest: /tmp/core
              ArtifactTargetFolder: "$(Build.ArtifactStagingDirectory)/core"
          - bash: $(Build.SourcesDirectory)/ithrowuncaughtex/build.sh . $(Build.BinariesDirectory)
            displayName: "Building failure exec(2)"
          - task: PythonScript@0
            displayName: "Running Python Script"
            inputs:
              scriptSource: 'inline'
              script: |
                import subprocess
                from subprocess import Popen, PIPE, STDOUT, DEVNULL
                cmd = [". $(Build.SourcesDirectory)/script/CaptureCritical/env.sh; $(Build.SourcesDirectory)/tests/ithrowuncaughtex-test.sh $(Build.BinariesDirectory)"]
                proc = Popen(cmd, shell=True, stderr=subprocess.STDOUT)
          - template: templates/CaptureCriticalRun.yml
