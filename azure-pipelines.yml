# Test pipeline

trigger:
  - main

stages:
  - stage: Testy
    pool:
      vmImage: ubuntu-latest
    displayName: "A test to see if what's built can be used within a separate stage"
    jobs:
      - job: ReRun
        displayName: "Re-run core handler"
        steps:
          - template: templates/CaptureCriticalPrepareLinux.yml
          - bash: sudo apt-get update --quiet && sudo apt-get install --yes --no-install-recommends --quiet --allow-downgrades gdb
          - bash: echo "$(CoreArtifactTargetFolder) and $(CoreDest)"
          - bash: ./script/CaptureCritical/kill-test.sh
          - bash: $(Build.SourcesDirectory)/ithrowuncaughtex/build.sh $(Build.SourcesDirectory) $(Build.BinariesDirectory)
            displayName: "Building failure exec(2)"
          - task: PythonScript@0
            displayName: "Running Python Script"
            inputs:
              scriptSource: 'inline'
              script: |
                import subprocess
                from subprocess import Popen, PIPE, STDOUT, DEVNULL
                cmd = "ulimit -c unlimited; $(Build.SourcesDirectory)/tests/ithrowuncaughtex-test.sh $(Build.BinariesDirectory)"
                print(cmd)
                proc = Popen(cmd, shell=True, stderr=subprocess.STDOUT)
          - template: templates/CaptureCriticalRun.yml
          - script: |
              docker pull github/super-linter:latest
          - script: |
              docker run \
              -e RUN_LOCAL=true \
              -e ERROR_ON_MISSING_EXEC_BIT=true \
              -e SUPPRESS_FILE_TYPE_WARN=true \
              -e LOG_LEVEL=VERBOSE \
              -e LINTER_RULES_PATH=/ \
              -e PYTHON_ISORT_CONFIG_FILE=setup.cfg \
              -e PYTHON_MYPY_CONFIG_FILE=setup.cfg \
              -e VALIDATE_ALL_CODEBASE=false \
              -e VALIDATE_BASH=true \
              -e VALIDATE_BASH_EXEC=true \
              -e VALIDATE_CLANG_FORMAT=true \
              -e VALIDATE_DOCKERFILE_HADOLINT=true \
              -e VALIDATE_MARKDOWN=true \
              -e VALIDATE_POWERSHELL=true \
              -e VALIDATE_PYTHON_FLAKE8=true \
              -e VALIDATE_PYTHON_ISORT=true \
              -e VALIDATE_SHELL_SHFMT=true \
              -e VALIDATE_YAML=true \
              -v $(Build.SourcesDirectory):/tmp/lint \
                github/super-linter
