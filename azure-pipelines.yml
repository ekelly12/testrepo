# Test pipeline

trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: BuildAndTest
    displayName: "Build Enivornment (Ubuntu)"
    jobs:
      - job: CoreConfig
        displayName: "Configuring the system to core dump"
        variables:
          - name: CORE_EXEC_PATH_FILE
            value: "$(Build.StagingDirectory)/core_handler_exec_paths.txt"
          - name: CORE_DEST
            value: /tmp/core
        steps:
          - bash: "$(Build.SourcesDirectory)/CaptureCritical/setup.sh $(Build.SourcesDirectory) $(CORE_DEST)"
            displayName: "Setting up system-wide environment"
          - bash: "$(Build.SourcesDirectory)/isegfault/build.sh $(Build.SourcesDirectory) $(Build.BinariesDirectory)"
            displayName: "Building failure exec(1)"
          - bash: "$(Build.SourcesDirectory)/ithrowuncaughtex/build.sh $(Build.SourcesDirectory) $(Build.BinariesDirectory)"
            displayName: "Building failure exec(2)"
          - bash: "ls -la $(Build.BinariesDirectory)"
            displayName: "Dump of build bin folder"
          - bash: "echo $(Build.BinariesDirectory) > $(CORE_EXEC_PATH_FILE)"
            displayName: "Writing the exec path file"
          - bash: "$(Build.SourcesDirectory)/tests/isegfault-test.sh $(Build.BinariesDirectory)"
            displayName: "Segmentation fault test"
          - bash: "$(Build.SourcesDirectory)/tests/ithrowuncaughtex-test.sh $(Build.BinariesDirectory)"
            displayName: "Uncaught exception test"
          - task: PythonScript@0
            displayName: 'Run error handler test'
            inputs:
              scriptSource: 'filePath'
              scriptPath: $(Build.SourcesDirectory)/CaptureCritical/core-handler.py
              arguments: >-
                test
                $(CORE_DEST)
                $(Build.SourcesDirectory)

  - stage: Testy
    displayName: "A test to see if what's built can be used within a separate stage"
    jobs:
      - job: ReRun
        displayName: "Re-run core handler"
        variables:
          - name: CORE_EXEC_PATH_FILE
            value: "$(Build.StagingDirectory)/core_handler_exec_paths.txt"
        steps:
          - task: CmdLine@2
            inputs:
              script: |
                sudo su
                sudo echo "*       soft    core    unlimited" >> /etc/security/limits.conf
                sudo echo "*       hard    core    unlimited" >> /etc/security/limits.conf
                exit
          - bash: "echo $(Build.BinariesDirectory) > $(CORE_EXEC_PATH_FILE)"
            displayName: "Writing the exec path file"
          - template: templates/CaptureCriticalPrepare.yml
            parameters:
              CoreDest: /tmp/core
              ExecDirPathFile: $(CORE_EXEC_PATH_FILE)
              ArtifactTargetFolder: $(Build.ArtifactStagingDirectory)
          - task: CmdLine@2
            inputs:
              script: |
               cat /etc/security/limits.conf
               ulimit -Sc unlimited
               echo "ulimit -Sc unlimited" >> ~/.bashrc && . ~/.bashrc
          - task: PythonScript@0
            inputs:
              scriptSource: 'inline'
              script: |
                import subprocess
                from subprocess import Popen, PIPE, STDOUT, DEVNULL
                p = Popen("cat ~/.bashrc", shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
                output = p.stdout.read()
                res = p.communicate()
                print(output)
          - bash: $(Build.SourcesDirectory)/ithrowuncaughtex/build.sh . $(Build.BinariesDirectory)
            displayName: "Building failure exec(2)"
          - bash: "$(Build.SourcesDirectory)/tests/ithrowuncaughtex-test.sh $(Build.BinariesDirectory)"
            displayName: "Uncaught exception test"
          - template: templates/CaptureCriticalRun.yml
